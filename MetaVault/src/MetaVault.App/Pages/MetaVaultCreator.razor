// MetaVaultCreator.razor
@page "/metavault"
@using MetaVault.App.Models
@using MetaVault.App.Services
@using MetaVault.App.Components
@inject IWeb3Service Web3Service
@inject NavigationManager Navigation

<div class="container mx-auto p-4">
    @if (_loading)
    {
        <LoadingSpinner />
    }
    else if (string.IsNullOrEmpty(_connectedAddress))
    {
        <div class="text-center">
            <h2 class="text-xl mb-4">Connect Your Wallet</h2>
            <button class="btn btn-primary" @onclick="ConnectWallet">
                Connect MetaMask
            </button>
        </div>
    }
    else if (!_hasMetaVault)
    {
        <div class="text-center">
            <h2 class="text-xl mb-4">Create Your MetaVault</h2>
            <button class="btn btn-primary" @onclick="CreateMetaVault" disabled="@_isCreating">
                @if (_isCreating)
                {
                    <span>Creating...</span>
                }
                else
                {
                    <span>Create MetaVault</span>
                }
            </button>
        </div>
    }
    else
    {
        <VaultManager MetaVaultAddress="@_metaVaultAddress" />
    }
</div>

@code {
    private bool _loading = true;
    private bool _isCreating = false;
    private bool _hasMetaVault = false;
    private string _connectedAddress = string.Empty;
    private string _metaVaultAddress = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await CheckWalletStatus();
    }

    private async Task CheckWalletStatus()
    {
        _loading = true;
        _connectedAddress = await Web3Service.GetConnectedAddress();
        
        if (!string.IsNullOrEmpty(_connectedAddress))
        {
            _hasMetaVault = await Web3Service.HasMetaVault(_connectedAddress);
            if (_hasMetaVault)
            {
                _metaVaultAddress = await Web3Service.GetUserMetaVault(_connectedAddress);
            }
        }
        
        _loading = false;
    }

    private async Task ConnectWallet()
    {
        var success = await Web3Service.ConnectWallet();
        if (success)
        {
            await CheckWalletStatus();
        }
    }

    private async Task CreateMetaVault()
    {
        _isCreating = true;
        var txHash = await Web3Service.CreateMetaVault();
        if (!string.IsNullOrEmpty(txHash))
        {
            await CheckWalletStatus();
        }
        _isCreating = false;
    }
}
}