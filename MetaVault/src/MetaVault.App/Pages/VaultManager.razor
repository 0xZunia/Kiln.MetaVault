@page "/vaultmanager/{MetaVaultAddress}"
@using MetaVault.App.Models
@using MetaVault.App.Services
@using MetaVault.App.Components
@inject IMetaVaultService MetaVaultService
@inject IWeb3Service Web3Service

<div class="container mx-auto p-4">
    <h2 class="text-2xl mb-6">Vault Allocations</h2>

    @if (vaults == null)
    {
        <LoadingSpinner />
    }
    else
    {
        @foreach (var vault in vaults)
        {
            <div class="mb-6">
                <div class="flex justify-between items-center mb-2">
                    <span class="font-medium">@vault.Name</span>
                    <span class="text-gray-600">APY: @vault.Apy%</span>
                </div>
                <AllocationSlider
                    Value="@vault.Allocation"
                    OnValueChanged="@((decimal value) => OnAllocationChanged(vault.Id, value))" />
            </div>
        }

        <div class="mt-8 pt-4 border-t">
            <div class="flex justify-between items-center">
                <span>Total Allocation:</span>
                <span class="font-bold">@TotalAllocation%</span>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string MetaVaultAddress { get; set; }

    private List<VaultInfo> vaults;
    private decimal TotalAllocation => vaults?.Sum(v => v.Allocation) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadVaults();
    }

    private async Task LoadVaults()
    {
        try
        {
            vaults = await MetaVaultService.GetVaults(MetaVaultAddress);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Gérer l'erreur ici
            Console.WriteLine($"Error loading vaults: {ex.Message}");
        }
    }

    private async Task OnAllocationChanged(string vaultId, decimal newValue)
    {
        try
        {
            var success = await MetaVaultService.UpdateVaultAllocation(MetaVaultAddress, vaultId, newValue);
            if (success)
            {
                await LoadVaults();
            }
        }
        catch (Exception ex)
        {
            // Gérer l'erreur ici
            Console.WriteLine($"Error updating allocation: {ex.Message}");
        }
    }
}